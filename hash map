#include <iostream>
#include <vector>
using namespace std;

// Code copied with adaptations/edits/removals by Anonymous 10/31/16 from:
// Owen Astrachan 11/8/95
// revised 3/30/00, key must be a string, value can be anything

template<class Value>
class Applicant
{
  public:
    //virtual ~Applicant() {};
    virtual void applyOne(string &key, Value & value) = 0;
};

template<class Value>
class Printer:public Applicant<Value>
{
  virtual void applyOne(string &key, Value & value); 
};

template<class Value>
void Printer<Value>::applyOne(string &key, Value & value){
  cout << key << value << endl;
};
  
template<class Value>
class HMapIterator;

template<class Value>
class HMap
{
  public:
  	 HMap(int size); // size of Hashmap
  	//~HMap();
  	
  	virtual bool contains(const string & key) const;        // is key in map?
  	
  	virtual Value& get(const string& key);
  	
  	virtual void remove(const string & key);
  	virtual void insert(const pair<string,Value> & pair);
  	virtual void insert(const string & key, const Value & value);
  	
  	virtual void applyAll(Applicant<Value> & obj);
  	
  	virtual HMapIterator<Value> * makeIterator();
    friend class HMapIterator<Value>;
  	
  private:
    struct Node
    {
	  pair<string, Value> info;
	  Node * next;
	  Node (const string& s,
	        const Value& v,
	        Node * ptr)
	      : info(s,v), next(ptr)
	  {
		
	  }
    };

    virtual unsigned int hash(const string &key) const;
    
    vector<Node *> myList;                  // vector of nodes
    int myNumElts;                          // # elements stored
};



template<class Value>
HMap<Value>::HMap(int size): myList(size,nullptr), myNumElts(0) {
	// fill myList with nullptrs
}

template <class Value>
bool HMap<Value>::contains(const string & key) const
// postcondition: returns true if key in map, otherwise returns false
{
  int index = hash(key) % myList.size();
	bool keyInMap = false;
	Node * current = myList[index];
	while(current != nullptr and not keyInMap){
		if(current->info.first == key){
			keyInMap = true;
		}
		else{
			current = current->next;
		}
	}
	return keyInMap;

}

template <class Value>
Value & HMap<Value>::get(const string & key)
// postcondition: returns value associated with key in map
// exception: if key not in map, error printed, program halted
{
	int index = hash(key) % myList.size();
	bool keyInMap = false;
	Node * current = myList[index];
	while(current != nullptr and not keyInMap){
		if(current->info.first == key){
			keyInMap = true;
		}
		else{
			current = current->next;
		}
	}
	if(keyInMap){
			return current->info.second;
	}
	else{
		cout << "ERROR! Key not in map.";
	}
}


template <class Value>
unsigned int HMap<Value>::hash(const string & key) const
{
	
    unsigned int hval = 0;
    int k;
    int len = key.size();
    for(k=0; k < len; k++)
    {
        hval = (hval << 5) ^ hval ^ key[k]; // ^ is XOR
    }
    return hval;
    
}

template <class Value>
void HMap<Value>::remove(const string & key) 
// postcondition: returns index of key in private vector (pointer)
//                returns 0 if key NOT in vector
{
	if(contains(key)){
		int index = hash(key) % myList.size();
		Node * current = myList[index];
		Node * previous	= nullptr;
		while(current->info.first != key){
			previous = current;
			current = current->next;
		}
		if(previous == nullptr){
			myList[index] = nullptr;
		}
		else{
			previous->next = current->next;
		}
		delete current;
	}
}

template <class Value>
void HMap<Value>::insert(const pair<string,Value> & pair)
// precondition: pair.first key NOT stored in map
// postcondition: pair is added to map (maps pair.first -> pair.second)
{
	int index = hash(pair.first) %myList.size();
	myList[index] = new Node(pair.first, pair.second, myList[index]);
}

template <class Value>
void HMap<Value>::insert(const string & key, const Value & val)
{
    insert(pair<string,Value>(key,val));
}

template <class Value>
void HMap<Value>::applyAll(Applicant<Value> & obj)
// postcondition: obj.applyOne() applied to all map elements     
{
  for(int i = 0; i < myList.size() - 1; i++){
    Node * current = myList[i];
    while(current != nullptr){
      obj.applyOne(myList[i]->info.first, myList[i]->info.second);
      current = current->next;
    }
  }
}

template <class Value>
HMapIterator<Value> * HMap<Value>::makeIterator() {
  return new HMapIterator<Value>(* this);
}

template <class Value>
class HMapIterator
{
  public:
    HMapIterator(HMap<Value>& map);
    //virtual ~HMapIterator() {}
    virtual void Init();
    virtual bool HasMore() const;
    virtual void Next();
    virtual Value& Current();
    
  private:
    HMap<Value>& myMap;
    typename HMap<Value>::Node * current;
    int myIndex;
    
};

template<class Value>
HMapIterator<Value>::HMapIterator(HMap<Value>& map): myMap(map), myIndex(0), current(map.myList[0]) {
  
}

template<class Value>
void HMapIterator<Value>::Init() {
  while(current == nullptr){
    current = current->next;
  }
    
}
  //find first element in hmap and set current pointer to that
  //because myList[0] could be a nullptr


template<class Value>
bool HMapIterator<Value>::HasMore() const {
  typename HMap<Value>::Node * currentCopy = current;
  int myIndexCopy = myIndex;
  bool moreElements = false;
  if(currentCopy->next != nullptr){
      moreElements = true;
    while(not moreElements and myIndexCopy < myMap.myList.size()){
      if (myMap.myList[myIndexCopy] == nullptr){
       myIndexCopy = myIndexCopy + 1;
      }
    }
   return moreElements;
  //are there anyone elements past the current pointer
  }
}

template<class Value>
void HMapIterator<Value>::Next(){
  if(current->next != nullptr){
    current = current->next;
  }
  else{
    myIndex = myIndex + 1;
    current = myMap.myList[myIndex];
    while(myMap.myList[myIndex] == nullptr){
      myIndex = myIndex + 1;
      current = myMap.myList[myIndex];
    }
  }
  //advance pointer
}

template<class Value>
Value& HMapIterator<Value>::Current() {
  return current->info.second;
  }

int main() {
    HMap<int> map(10);

}
